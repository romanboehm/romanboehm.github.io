<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring on Roman Böhm</title><link>/tags/spring/</link><description>Recent content in Spring on Roman Böhm</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 20 Jun 2024 19:53:06 +0000</lastBuildDate><atom:link href="/tags/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>Programmatically find unused properties in a Spring Boot app</title><link>/til/spring-boot-unused-properties/</link><pubDate>Thu, 20 Jun 2024 00:00:00 +0000</pubDate><guid>/til/spring-boot-unused-properties/</guid><description>&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>&lt;a href="https://docs.spring.io/spring-boot/reference/features/external-config.html">Spring Boot&amp;rsquo;s externalized configuration&lt;/a> is a powerful feature. But with great power comes, ahem, at least sometimes, a bunch of unused properties polluting your environment. That &lt;code>what=where-does-this-get-used&lt;/code> in &lt;code>application-doineedthem.properties&lt;/code>? You might be able to remove it.&lt;/p>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;p>I created a solution that you can incorporate into your test setup, so&lt;/p>
&lt;ol>
&lt;li>you get a failing build if you have unused properties (in a linter kind of way), and&lt;/li>
&lt;li>you do not pollute your regular classpath with code related to meta topics such as unused properties.&lt;/li>
&lt;/ol>
&lt;p>First, create an &lt;code>EnvironmentPostProcessor&lt;/code>, which &amp;ldquo;[a]llows for customization of the application&amp;rsquo;s Environment prior to the application context being refreshed.&amp;rdquo; This should be the correct time to &lt;em>snapshot&lt;/em> your properties and inject property-usage tracking capabilities.&lt;/p></description></item><item><title>How to: Configure Multiple DataSources in Spring Boot</title><link>/posts/how-to-configure-multiple-datasources-in-spring-boot/</link><pubDate>Tue, 16 Aug 2022 00:00:00 +0000</pubDate><guid>/posts/how-to-configure-multiple-datasources-in-spring-boot/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>A few days ago a colleague of mine and I wanted to know &amp;ldquo;[w]hat’s the Spring Boot way of defining three different DataSources through externalized config (application.yaml), with each sharing the same Hikari settings?&amp;rdquo; That is: We basically had a working solution, we just weren&amp;rsquo;t sure it was how you&amp;rsquo;d do it making use of all the goodness Spring Boot offers. Therefore I consequently tried &lt;a href="https://twitter.com/0xromanboehm/status/1557374298536525825?s=20&amp;amp;t=09VLy1imZC-GJ5BtLaH7Cw">offloading the task of figuring it out to Twitter&lt;/a>. -.-&lt;/p></description></item><item><title>Tell Me Your Environment and I Tell You What Your Context Is</title><link>/posts/tell-me-your-environment-and-i-tell-you-what-your-context-is/</link><pubDate>Sat, 06 Aug 2022 00:00:00 +0000</pubDate><guid>/posts/tell-me-your-environment-and-i-tell-you-what-your-context-is/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>At my previous work we had this problem where we couldn&amp;rsquo;t run through our entire workflow in our integration system because we were missing the necessary input data to some central service&amp;rsquo;s integration instance. We therefore took it upon us to provide said data by asynchronously &lt;em>mirroring&lt;/em> data from prod to int.&lt;/p>
&lt;p>This is definitely not a &amp;ldquo;Five tips on how to deal with numbers in JavaScript &amp;ndash; NaN will shock you!&amp;rdquo; or &amp;ldquo;The best Spring annotations of 2021&amp;rdquo; kind of post. There aren&amp;rsquo;t going to be any checklists, best practices, or tips on anything. I just wanted to write down a somewhat elegant solution to a mildly interesting problem.&lt;/p></description></item><item><title>Keep Your Properties Close, but Your @TestConfiguration Closer - Selected Spring Boot Testing Tips</title><link>/posts/keep-your-properties-close-but-your-@testconfiguration-closer-selected-spring-boot-testing-tips/</link><pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate><guid>/posts/keep-your-properties-close-but-your-@testconfiguration-closer-selected-spring-boot-testing-tips/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Spring Boot is great and the best thing about it is how easy it makes it to test your application. So here are some selected tips for writing tests with Spring Boot. The most recent stable Spring Boot version at the time of publishing was 2.5.5.&lt;/p>
&lt;h2 id="keep-configuration-close-to-the-tests">Keep Configuration Close to the Tests&lt;/h2>
&lt;p>The configuration and setup of the tests should be as close to them as possible. This reduces the possibility of one test interfering with another and makes it much easier for the reader of the test to grok its purpose.
Here are two means to achieve that goal:&lt;/p></description></item></channel></rss>