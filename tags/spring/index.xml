<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring on Roman Böhm</title><link>/tags/spring/</link><description>Recent content in Spring on Roman Böhm</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 26 Jun 2023 15:24:35 +0000</lastBuildDate><atom:link href="/tags/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>How to: Configure Multiple DataSources in Spring Boot</title><link>/posts/how-to-configure-multiple-datasources-in-spring-boot/</link><pubDate>Tue, 16 Aug 2022 00:00:00 +0000</pubDate><guid>/posts/how-to-configure-multiple-datasources-in-spring-boot/</guid><description>Introduction A few days ago a colleague of mine and I wanted to know &amp;ldquo;[w]hat’s the Spring Boot way of defining three different DataSources through externalized config (application.yaml), with each sharing the same Hikari settings?&amp;rdquo; That is: We basically had a working solution, we just weren&amp;rsquo;t sure it was how you&amp;rsquo;d do it making use of all the goodness Spring Boot offers. Therefore I consequently tried offloading the task of figuring it out to Twitter.</description></item><item><title>Tell Me Your Environment and I Tell You What Your Context Is</title><link>/posts/tell-me-your-environment-and-i-tell-you-what-your-context-is/</link><pubDate>Sat, 06 Aug 2022 00:00:00 +0000</pubDate><guid>/posts/tell-me-your-environment-and-i-tell-you-what-your-context-is/</guid><description>Introduction At my previous work we had this problem where we couldn&amp;rsquo;t run through our entire workflow in our integration system because we were missing the necessary input data to some central service&amp;rsquo;s integration instance. We therefore took it upon us to provide said data by asynchronously mirroring data from prod to int.
This is definitely not a &amp;ldquo;Five tips on how to deal with numbers in JavaScript &amp;ndash; NaN will shock you!</description></item><item><title>Keep Your Properties Close, but Your @TestConfiguration Closer - Selected Spring Boot Testing Tips</title><link>/posts/keep-your-properties-close-but-your-@testconfiguration-closer-selected-spring-boot-testing-tips/</link><pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate><guid>/posts/keep-your-properties-close-but-your-@testconfiguration-closer-selected-spring-boot-testing-tips/</guid><description>Introduction Spring Boot is great and the best thing about it is how easy it makes it to test your application. So here are some selected tips for writing tests with Spring Boot. The most recent stable Spring Boot version at the time of publishing was 2.5.5.
Keep Configuration Close to the Tests The configuration and setup of the tests should be as close to them as possible. This reduces the possibility of one test interfering with another and makes it much easier for the reader of the test to grok its purpose.</description></item></channel></rss>