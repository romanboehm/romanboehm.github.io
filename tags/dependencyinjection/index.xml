<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dependencyinjection on Roman Böhm</title><link>/tags/dependencyinjection/</link><description>Recent content in Dependencyinjection on Roman Böhm</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 26 Jun 2023 15:24:35 +0000</lastBuildDate><atom:link href="/tags/dependencyinjection/index.xml" rel="self" type="application/rss+xml"/><item><title>Tell Me Your Environment and I Tell You What Your Context Is</title><link>/posts/tell-me-your-environment-and-i-tell-you-what-your-context-is/</link><pubDate>Sat, 06 Aug 2022 00:00:00 +0000</pubDate><guid>/posts/tell-me-your-environment-and-i-tell-you-what-your-context-is/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>At my previous work we had this problem where we couldn&amp;rsquo;t run through our entire workflow in our integration system because we were missing the necessary input data to some central service&amp;rsquo;s integration instance. We therefore took it upon us to provide said data by asynchronously &lt;em>mirroring&lt;/em> data from prod to int.&lt;/p>
&lt;p>This is definitely not a &amp;ldquo;Five tips on how to deal with numbers in JavaScript &amp;ndash; NaN will shock you!&amp;rdquo; or &amp;ldquo;The best Spring annotations of 2021&amp;rdquo; kind of post. There aren&amp;rsquo;t going to be any checklists, best practices, or tips on anything. I just wanted to write down a somewhat elegant solution to a mildly interesting problem.&lt;/p></description></item></channel></rss>