<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Today I Learned ... on Roman BÃ¶hm</title><link>/til/</link><description>Recent content in Today I Learned ... on Roman BÃ¶hm</description><generator>Hugo</generator><language>en-us</language><atom:link href="/til/index.xml" rel="self" type="application/rss+xml"/><item><title>Programmatically find unused properties in a Spring Boot app</title><link>/til/spring-boot-unused-properties/</link><pubDate>Thu, 20 Jun 2024 00:00:00 +0000</pubDate><guid>/til/spring-boot-unused-properties/</guid><description>&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>&lt;a href="https://docs.spring.io/spring-boot/reference/features/external-config.html">Spring Boot&amp;rsquo;s externalized configuration&lt;/a> is a powerful feature. But with great power comes, ahem, at least sometimes, a bunch of unused properties polluting your environment. That &lt;code>what=where-does-this-get-used&lt;/code> in &lt;code>application-doineedthem.properties&lt;/code>? You might be able to remove it.&lt;/p>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;p>I created a solution that you can incorporate into your test setup, so&lt;/p>
&lt;ol>
&lt;li>you get a failing build if you have unused properties (in a linter kind of way), and&lt;/li>
&lt;li>you do not pollute your regular classpath with code related to meta topics such as unused properties.&lt;/li>
&lt;/ol>
&lt;p>First, create an &lt;code>EnvironmentPostProcessor&lt;/code>, which &amp;ldquo;[a]llows for customization of the application&amp;rsquo;s Environment prior to the application context being refreshed.&amp;rdquo; This should be the correct time to &lt;em>snapshot&lt;/em> your properties and inject property-usage tracking capabilities.&lt;/p></description></item><item><title>Bulk Import Into Safari's Reading List</title><link>/til/bulk-add-to-safari-reading-list/</link><pubDate>Thu, 28 Sep 2023 00:00:00 +0000</pubDate><guid>/til/bulk-add-to-safari-reading-list/</guid><description>&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>I had recently dissolved some third-party reading list of mine and wanted to migrate all these yet unread articles and blog posts into Safari&amp;rsquo;s reading list. I was looking for some kind of bulk import functionality in Safari itself, but only found the option to add multiple tabs to the reading list. With my former list containing over 300 items, that wasn&amp;rsquo;t the way to go.&lt;/p>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;p>Luckily, MacOS&amp;rsquo; &lt;em>Notes&lt;/em> app offers a way to bypass the need to open hundreds of tabs, provided you have the reading list items available as a new line-separated list of links. If so, simply&lt;/p></description></item><item><title>Use Mastodon as a Comment System</title><link>/til/mastodon-comments/</link><pubDate>Sat, 23 Sep 2023 00:00:00 +0000</pubDate><guid>/til/mastodon-comments/</guid><description>&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>I wanted to have a comment system for the posts in this blog. Not because I think there&amp;rsquo;s demand for it, but because I can. ðŸ˜Ž&lt;/p>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;p>The first thing which came to my mind was abusing Mastodon&amp;rsquo;s &lt;em>toot&lt;/em> system for my comment system. And of course, I (luckily) wasn&amp;rsquo;t the first person to have that idea. Daniel Pecos provided both a &lt;a href="https://danielpecos.com/2022/12/25/mastodon-as-comment-system-for-your-static-blog/">detailed instructional post&lt;/a> as well as &lt;a href="https://github.com/dpecos/mastodon-comments">webcomponent&lt;/a> to embed Mastodon discussion on one&amp;rsquo;s site.&lt;/p></description></item><item><title>Frictionless SSH for VS Code Dev Containers on MacOS</title><link>/til/vs-code-devcontainer-ssh/</link><pubDate>Fri, 30 Jun 2023 00:00:00 +0000</pubDate><guid>/til/vs-code-devcontainer-ssh/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>I wanted to write down how I got a frictionless SSH setup for &lt;a href="https://code.visualstudio.com/docs/devcontainers/containers">VS Code Dev Containers&lt;/a> on MacOS where I have the necessary keys available, but don&amp;rsquo;t need to manually unlock them anymore. I can e.g. simply push to GitHub/pull from GitHub from my dev environment inside the container.&lt;/p>
&lt;h2 id="setup">Setup&lt;/h2>
&lt;h3 id="ssh-keys">SSH Key(s)&lt;/h3>
&lt;p>I usually create a separate SSH key pair for every use case. That means my &lt;code>~/.ssh&lt;/code> dir contains a dedicated key for GitHub, which I&amp;rsquo;ll use as an example in the remainder of the post:&lt;/p></description></item><item><title>Using a Manitu Domain for iCloud Mail</title><link>/til/icloud-mail-manitu-domain/</link><pubDate>Fri, 23 Jun 2023 00:00:00 +0000</pubDate><guid>/til/icloud-mail-manitu-domain/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>How to: Set up a custom domain for iCloud mail using a Manitu domain&lt;/p>
&lt;p>I&amp;rsquo;m using the German hoster &lt;a href="https://www.manitu.de">Manitu&lt;/a> for the romanboehm.com domain. I also have an iCloud+ subscription &lt;a href="https://www.icloud.com/icloudplus/customdomain">allowing me to use this domain for iCloud mail&lt;/a>. I found the process of setting that up quite under-supported on both iCloud and Manitu&amp;rsquo;s side, so I wanted to document it. &lt;a href="https://bazomg.de/index.php/2022/01/eigene-domain-in-icloud-mail-nutzen/">A German-speaking blogger named Steven Kaminsky apparently had encountered the same pains in the past&lt;/a>, and the linked post was of great help, but I still wanted to quickly persist my notes on the process and highlight potential hiccups with Manitu especially. For my sake and fellow Manitu-with-iCloud+ users'.&lt;/p></description></item><item><title>Use Raw HTML in Hugo's Markdown</title><link>/til/hugo-raw-html/</link><pubDate>Mon, 02 Jan 2023 00:00:00 +0000</pubDate><guid>/til/hugo-raw-html/</guid><description>&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>I want the link to this blog in my Mastodon profile to be &lt;a href="https://snyk.io/blog/verify-and-secure-your-mastodon-account/">&amp;ldquo;verified&amp;rdquo; (green) link&lt;/a>. This is done by adding a custom anchor element somewhere on the site:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;me&amp;#39;&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;https://mastodon.social/@romanboehm&amp;#39;&lt;/span>&amp;gt;Mastodon&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>By default, however, Hugo, the static site generator of my choice, does not permit this.&lt;/p>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;p>If you don&amp;rsquo;t like to activate the &lt;a href="https://gohugo.io/getting-started/configuration-markup/">renderer&amp;rsquo;s unsafe mode&lt;/a> in order to be able to insert raw html, you can achieve this with so-called &lt;a href="https://gohugo.io/content-management/shortcodes/">&lt;em>shortcodes&lt;/em>&lt;/a>:&lt;/p></description></item><item><title>Custom Shortcuts For Any Web Editor</title><link>/til/custom-shortcuts/</link><pubDate>Sat, 17 Sep 2022 00:00:00 +0000</pubDate><guid>/til/custom-shortcuts/</guid><description>&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>Confluence and Jira, at the least in the versions we use at my work, do not offer shortcuts for monospace formatting. You can type two opening curly brackets followed by &amp;lt;text&amp;gt; followed by two closing curly brackets, and that will render &amp;lt;text&amp;gt; monospaced. But that does not work for applying formatting later one.&lt;/p>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;p>There&amp;rsquo;s a nice, generic workaround for problems like these: &lt;a href="https://en.wikipedia.org/wiki/Bookmarklet">Bookmarklets&lt;/a>. They live as bookmarks in your browser, but you can see them as buttons being able to execute JavaScript on click.&lt;/p></description></item><item><title>Using Third Party Email Aliases With iCloud Mail on iOS/iPadOS</title><link>/til/mail-alias-ios-ipados/</link><pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate><guid>/til/mail-alias-ios-ipados/</guid><description>&lt;p>How to: Use Third Party Email Aliases With iCloud Mail on iOS/iPadOS&lt;/p>
&lt;p>My primary mail account is with &lt;a href="https://www.posteo.de">Posteo&lt;/a>, a privacy-focused provider from Germany. I don&amp;rsquo;t intend to change that, they&amp;rsquo;re great and deserve every support!&lt;/p>
&lt;p>Also, I&amp;rsquo;m using Apple&amp;rsquo;s operating systems almost exclusively and subscribe to iCloud. iCloud and third party mail aren&amp;rsquo;t a great match, unfortunately.&lt;/p>
&lt;p>So for a long time I couldn&amp;rsquo;t figure out &lt;em>how to use my iCloud account to both receive and send mail through my posteo.de address&lt;/em>. On Android using Gmail that wasn&amp;rsquo;t hard: Forward mail to your Gmail account and register your posteo address as an alias. This alias was then available also in the Gmail app.&lt;/p></description></item><item><title>Ubuntu and Nvidia Optimus</title><link>/til/optimus-ubuntu/</link><pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate><guid>/til/optimus-ubuntu/</guid><description>&lt;p>How to: Make Nvidia Optimus work after installing Ubuntu 21.04.&lt;/p>
&lt;p>I own a Thinkpad T480 with a dedicated GPU (Nvidia Geforce MX 150) in addition to the onboard Intel GPU. The easiest way to have a Linux distribution with full Optimus support running would be to download the most recent PopOS! image with the proprietary Nvidia drivers baked in.&lt;/p>
&lt;p>Since I cannot stand some of the modifications System76 made to Gnome I just want to get the most recent Ubuntu (or Kubuntu) version and go from there. Ubuntu installed just fine without any graphics glitched or black screens and &lt;code>prime-select query&lt;/code> shows &lt;em>nvidia&lt;/em>. Something was not right, however: &lt;code>nvidia-settings&lt;/code> produced a tiny, empty window and judging from &lt;code>powertop&lt;/code> stats it seemed like the system still used the onboard intel graphics.&lt;/p></description></item></channel></rss>