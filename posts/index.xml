<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Roman BÃ¶hm</title><link>/posts/</link><description>Recent content in Posts on Roman BÃ¶hm</description><generator>Hugo</generator><language>en-us</language><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>OCR to ical, or: My first attempt of doing something useful with generative AI</title><link>/posts/ocr-to-ical-or-my-first-attempt-of-doing-something-useful-with-generative-ai/</link><pubDate>Fri, 20 Sep 2024 00:00:00 +0000</pubDate><guid>/posts/ocr-to-ical-or-my-first-attempt-of-doing-something-useful-with-generative-ai/</guid><description>&lt;p>TLDR: &lt;a href="https://ocrical.romanboehm.com/">ocrical&lt;/a>. ðŸ˜Ž&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>As a person living in Germany, you get quite a lot (read: too much) of schedules on paper or, if you&amp;rsquo;re lucky, as PDFs. E.g. my daughter&amp;rsquo;s school sends out these newsletters once a quarter or so with dates for the parent-teacher conferences, school plays, extracurricular activities, deadlines, you name it.&lt;/p>
&lt;p>In the past, I went ahead and entered all these dates manually into my Google calendar since OCR alone couldn&amp;rsquo;t make sense of the unstructured data. And there&amp;rsquo;s not a program I could write that would be able to do so by itself &amp;ndash; there&amp;rsquo;s just too many different layouts.&lt;/p></description></item><item><title>How to: Distribute a Java Source File on GitHub</title><link>/posts/how-to-distribute-a-java-source-file-on-github/</link><pubDate>Sun, 08 Jan 2023 00:00:00 +0000</pubDate><guid>/posts/how-to-distribute-a-java-source-file-on-github/</guid><description>&lt;h2 id="update-2023-04-18">Update 2023-04-18&lt;/h2>
&lt;p>The below post is relevant anymore only for historic reasons. Contrary to my statement below, JReleaser does indeed offer the possibility to &lt;a href="https://fosstodon.org/@jreleaser/109676555681811519">distribute source files&lt;/a>, basically in a &lt;a href="https://github.com/romanboehm/jsonwheel/blob/main/pom.xml#L170">single line&lt;/a>. In combination with the Maven Release plugin, I was able to standardize the whole workflow, which made distributing &lt;code>JsonWheel.java&lt;/code> and upgrading versions much easier.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>For my single-source-file-no-dependencies JSON parser for the JVM, &lt;a href="https://github.com/romanboehm/jsonwheel">JSON Wheel&lt;/a>, I was looking for a better way for distribution other than a bunch of convoluted, homegrown shell scripts, or modifying and uploading files manually to GitHub releases. With a release cadence of like one-and-a-half releases a year, who has time for that?&lt;/p></description></item><item><title>How to: Configure Multiple DataSources in Spring Boot</title><link>/posts/how-to-configure-multiple-datasources-in-spring-boot/</link><pubDate>Tue, 16 Aug 2022 00:00:00 +0000</pubDate><guid>/posts/how-to-configure-multiple-datasources-in-spring-boot/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>A few days ago a colleague of mine and I wanted to know &amp;ldquo;[w]hatâ€™s the Spring Boot way of defining three different DataSources through externalized config (application.yaml), with each sharing the same Hikari settings?&amp;rdquo; That is: We basically had a working solution, we just weren&amp;rsquo;t sure it was how you&amp;rsquo;d do it making use of all the goodness Spring Boot offers. Therefore I consequently tried &lt;a href="https://twitter.com/0xromanboehm/status/1557374298536525825?s=20&amp;amp;t=09VLy1imZC-GJ5BtLaH7Cw">offloading the task of figuring it out to Twitter&lt;/a>. -.-&lt;/p></description></item><item><title>Tell Me Your Environment and I Tell You What Your Context Is</title><link>/posts/tell-me-your-environment-and-i-tell-you-what-your-context-is/</link><pubDate>Sat, 06 Aug 2022 00:00:00 +0000</pubDate><guid>/posts/tell-me-your-environment-and-i-tell-you-what-your-context-is/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>At my previous work we had this problem where we couldn&amp;rsquo;t run through our entire workflow in our integration system because we were missing the necessary input data to some central service&amp;rsquo;s integration instance. We therefore took it upon us to provide said data by asynchronously &lt;em>mirroring&lt;/em> data from prod to int.&lt;/p>
&lt;p>This is definitely not a &amp;ldquo;Five tips on how to deal with numbers in JavaScript &amp;ndash; NaN will shock you!&amp;rdquo; or &amp;ldquo;The best Spring annotations of 2021&amp;rdquo; kind of post. There aren&amp;rsquo;t going to be any checklists, best practices, or tips on anything. I just wanted to write down a somewhat elegant solution to a mildly interesting problem.&lt;/p></description></item><item><title>Harry Logger and the Message with the Garbled Pattern</title><link>/posts/harry-logger-and-the-message-with-the-garbled-pattern/</link><pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate><guid>/posts/harry-logger-and-the-message-with-the-garbled-pattern/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>I know &amp;rsquo;twas the season (of problems with logging), but this post is definitely not about the recent log4j 2.x vulnerabilities. With that out of the way&amp;hellip;&lt;/p>
&lt;p>Have you ever woken up and wondered &amp;ldquo;How can a combination of a specific log message in a Java app, log4j, journald, and Filebeat corrupt logs downstream?&amp;rdquo; No? Good, me neither. That should not be something to worry about, and yet it was for my team and me at work recently.&lt;/p></description></item><item><title>Keep Your Properties Close, but Your @TestConfiguration Closer - Selected Spring Boot Testing Tips</title><link>/posts/keep-your-properties-close-but-your-@testconfiguration-closer-selected-spring-boot-testing-tips/</link><pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate><guid>/posts/keep-your-properties-close-but-your-@testconfiguration-closer-selected-spring-boot-testing-tips/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Spring Boot is great and the best thing about it is how easy it makes it to test your application. So here are some selected tips for writing tests with Spring Boot. The most recent stable Spring Boot version at the time of publishing was 2.5.5.&lt;/p>
&lt;h2 id="keep-configuration-close-to-the-tests">Keep Configuration Close to the Tests&lt;/h2>
&lt;p>The configuration and setup of the tests should be as close to them as possible. This reduces the possibility of one test interfering with another and makes it much easier for the reader of the test to grok its purpose.
Here are two means to achieve that goal:&lt;/p></description></item><item><title>Meta Militia, or: Using a Custom Domain with GitHub Pages</title><link>/posts/meta-militia-or-using-a-custom-domain-with-github-pages/</link><pubDate>Wed, 16 Jun 2021 00:00:00 +0000</pubDate><guid>/posts/meta-militia-or-using-a-custom-domain-with-github-pages/</guid><description>&lt;p>How to: Using a custom domain (apex domain and &lt;em>www&lt;/em> subdomain) for a Hugo-generated page hosted on GitHub Pages.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>What better first post than a meta post detailing the experience of getting my page running under my own domain in the first place. On the &lt;em>true developer&lt;/em>-scale probably right below writing your own custom static site generator (in Rust or Kotlin, of course). If you&amp;rsquo;re too cheap for the all-inclusive Wordpress experience, too vain to just use the &lt;em>&amp;lt;username&amp;gt;.github.io&lt;/em> domain, or too lazy to read the actual (very decent docs), this one&amp;rsquo;s for you!&lt;/p></description></item></channel></rss>